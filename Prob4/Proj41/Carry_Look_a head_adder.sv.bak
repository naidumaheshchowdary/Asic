
module Carry_look_A_Head_Adder(
input logic [31:0] A_In, B_In, 
input logic C_In,
output logic [31:0] Sum, 
output logic C_Out
);
logic [31:0]G, P ;
logic [32:0]C;


assign G = A_In & B_In;
assign P = A_In ^ B_In;
//assign 
/*
generate
        for (i = 0; i < N; i++) begin : carry_generation
            assign C[i+1] = G[i] | (P[i] & C[i]); // Carry out
        end
    endgenerate
*//*
for (genvar i = 0; i < 32; i++) begin
        assign P[i] = A_In[i] ^ B_In[i]; // Propagate
        assign G[i] = A_In[i] & B_In[i]; // Generate
    end
*/
//always_comb begin
assign C[0] = C_In;
for (genvar i = 0; i < 32; i++) begin            
	//assign G[i] = A_In[i]&B_In[i];
	//assign P[i] = A_In[i]|B_In[i];
	assign C[i+1] = G[i] | P[i]&C[i];
		//C[i+1] = A_In[i]&B_In[i] 
end  
 //end 
assign C_Out = C[32];
//assign Sum = A_In^B_In^C[31:0];
assign Sum = P ^ C[31:0];

endmodule




